services:
  mysql:
    image: mysql:9.3
    container_name: ebank-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
    ports:
      - "3306:3306"
    networks:
      - ebank_network
    volumes:
      - ./scripts/mysql/init:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql

  redis:
    image: redis:7.2
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - ebank_network
    volumes:
      - redis_data:/data

  rabbitmq:
    image: rabbitmq:4-management
    container_name: ebank-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: P4ssword!
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - ebank_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  configserver:
    image: "examplebank/configserver:latest"
    container_name: ebank-configserver
    environment:
      SPRING_CLOUD_CONFIG_GIT_URI: "https://github.com/mrschwartx/demo-spring-microservices.git"
      SPRING_CLOUD_CONFIG_GIT_SEARCH_PATH: "configs"
    ports:
      - "8071:8071"
    networks:
      - ebank_network
    depends_on:
      - rabbitmq
      - mysql
      - redis
    extends:
      file: ./scripts/docker/common-config.yml
      service: microservice-base-config
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s

  eurekaserver:
    image: "examplebank/eurekaserver:latest"
    container_name: ebank-eurekaserver
    environment:
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"
    ports:
      - "8070:8070"
    networks:
      - ebank_network
    depends_on:
      configserver:
        condition: service_healthy

  loans:
    image: "examplebank/loans:latest"
    container_name: ebank-loans
    environment:
      SPRING_PROFILES_ACTIVE: "qa"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"
      EUREKA_SERVICE_URL: "http://eurekaserver:8070/eureka/"
      LOANS_JDBC_DATABASE_URL: "jdbc:mysql://mysql:3306/ebank_loans_db?serverTimezone=Asia/Jakarta"
      LOANS_JDBC_DATABASE_USERNAME: "loans_user"
      LOANS_JDBC_DATABASE_PASSWORD: "loans_pass"
    ports:
      - "8090:8090"
    networks:
      - ebank_network
    depends_on:
      configserver:
        condition: service_healthy

  accounts:
    image: "examplebank/accounts:latest"
    container_name: ebank-accounts
    environment:
      SPRING_PROFILES_ACTIVE: "qa"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"
      EUREKA_SERVICE_URL: "http://eurekaserver:8070/eureka/"
      ACCOUNTS_JDBC_DATABASE_URL: "jdbc:mysql://mysql:3306/ebank_accounts_db?serverTimezone=Asia/Jakarta"
      ACCOUNTS_JDBC_DATABASE_USERNAME: "accounts_user"
      ACCOUNTS_JDBC_DATABASE_PASSWORD: "accounts_pass"
    ports:
      - "8080:8080"
    networks:
      - ebank_network
    depends_on:
      configserver:
        condition: service_healthy

  cards:
    image: "examplebank/cards:latest"
    container_name: ebank-cards
    environment:
      SPRING_PROFILES_ACTIVE: "qa"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"
      EUREKA_SERVICE_URL: "http://eurekaserver:8070/eureka/"
      CARDS_JDBC_DATABASE_URL: "jdbc:mysql://mysql:3306/ebank_cards_db?serverTimezone=Asia/Jakarta"
      CARDS_JDBC_DATABASE_USERNAME: "cards_user"
      CARDS_JDBC_DATABASE_PASSWORD: "cards_pass"
    ports:
      - "9000:9000"
    networks:
      - ebank_network
    depends_on:
      configserver:
        condition: service_healthy

  gatewayserver:
    image: "examplebank/gatewayserver:latest"
    container_name: ebank-gatewayserver
    environment:
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"
      EUREKA_SERVICE_URL: "http://eurekaserver:8070/eureka/"
      SPRING_DATA_REDIS_HOST: "redis"
      SPRING_DATA_REDIS_PORT: 6379
    ports:
      - "8072:8072"
    networks:
      - ebank_network
    depends_on:
      configserver:
        condition: service_healthy

  alloy:
    image: grafana/alloy:v1.5.1
    container_name: loki-alloy
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "12345:12345"
    volumes:
      - ./scripts/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ebank_network
    depends_on:
      - gateway

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    container_name: loki-minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    networks:
      - ebank_network

  read:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    container_name: loki-read
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ./scripts/loki/loki-config.yaml:/etc/loki/config.yaml
    networks:
      - ebank_network
    depends_on:
      - minio

  write:
    image: grafana/loki:3.1.2
    container_name: loki-write
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ./scripts/loki/loki-config.yaml:/etc/loki/config.yaml
    networks:
      - ebank_network
    depends_on:
      - minio

  backend:
    image: grafana/loki:3.1.2
    container_name: loki-backend
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    volumes:
      - ./scripts/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    networks:
      - ebank_network
    depends_on:
      - gateway

  grafana:
    image: grafana/grafana:11.4.0
    container_name: grafana
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3000:3000"
    volumes:
      - ./scripts/grafana/provisioning:/etc/grafana/provisioning
      - ./scripts/grafana/dashboards:/etc/grafana/dashboards
    networks:
      - ebank_network
    depends_on:
      - gateway

  gateway:
    image: nginx:1.27.3
    container_name: loki-gateway
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    networks:
      - ebank_network
    depends_on:
      - read
      - write
  
  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=5m'
      - '--storage.tsdb.retention.size=10GB'
    networks:
      - ebank_network
    depends_on:
      - gateway

networks:
  ebank_network:
    driver: "bridge"

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
